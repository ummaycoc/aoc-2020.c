using system, regex ;
leftFirst = reduce with a + b * c = (a + b) * c end ;
rightFirst = reduce with a * b + c = a * (b + c) end ;
evall a = if same a aa then a else evall aa with aa = eval a end ;
quoted s = regsub (cst "'(") "(" 0 s 0 ; // can these two be done more idiomatically?
toLong s = regsub (\s -> s!1 + "L") "[[:digit:]][[:digit:]]*" 0 s 0 ;
let input = map val . filter ("" ~=) . split "\n" . toLong . quoted . fget $ fopen "input.raw" "r" ;
run r = init . str . foldl (+) 0L . map (evall . r) $ input ;
printf "Part 1: %s\nPart 2: %s\n" (run leftFirst, run (rightFirst . leftFirst)) ;
